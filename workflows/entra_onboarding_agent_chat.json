{
  "name": "entra_onboarding_agent_chat",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -960,
        0
      ],
      "id": "0db7d40c-e8c0-45b3-8cdb-27ec5e715b98",
      "name": "When chat message received",
      "webhookId": "9a342896-207b-4d99-9bb0-e336523b5615"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -432,
        -160
      ],
      "id": "433bf386-a127-4c1e-b98b-7b2ed1c041a6",
      "name": "Model"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.sessionId || $json.userId || $json.chatId || $json.$chatId || $json.$userId || $json.message?.chat?.id }}",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -432,
        160
      ],
      "id": "82d22b3d-6b5b-410d-9f44-f112e58a310c",
      "name": "Memory"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "# Entra Onboarding Agent (SSO Pattern Selector)\n\nYou are an expert assistant that interviews application owners and selects the correct **Microsoft Entra ID** SSO pattern, then prepares an onboarding YAML and opens a GitHub PR.\n\n## Your tools\n- **Questionnaire JSON** \u2014 fetches the canonical question list.\n- **State: Get** \u2014 read conversation state for this user/app.\n- **State: Save** \u2014 persist each answer you collect, and the computed recommendation.\n- **Finalize Onboarding** \u2014 when you have everything, send a single JSON payload to this tool to create the YAML and the GitHub PR. It returns the PR URL.\n\n## Conversation protocol\n1. Start by asking for **application_id** and application name.\n2. Then, ask only one focused question at a time. After each answer, call **State: Save** with fields: `user_id`, `app_id`, `question_id`, `answer`.\n3. Use **Questionnaire JSON** at the start to know the available questions. Use them as your guidance, but feel free to ask follow-ups to clarify technical fit.\n4. Periodically use **State: Get** with `user_id` to reload your current progress (idempotent).\n5. When ready, compute a recommendation and confirm with the user.\n\n## Decision rules (abbreviated)\n- If application supports **OpenID Connect/OAuth 2.0**, prefer OIDC (Authorization Code, PKCE for public clients). \n- If not OIDC but supports **SAML 2.0**, choose SAML 2.0 (SP-initiated by default).\n- For legacy **WS-Fed**, use only if explicitly required.\n- For on-prem apps that need inbound access, use **Azure AD Application Proxy**. If app expects **headers or Kerberos**, use App Proxy with **KCD**.\n- For SPAs: OIDC with **PKCE**, implicit is not allowed.\n- Always capture: redirect/reply/logout URLs, claims needed, certificate requirements (SAML), and environment (dev/test/prod).\n\n## Final payload contract\nWhen you and the user confirm, call **Finalize Onboarding** with a JSON body:\n{\n  \"complete\": true,\n  \"user_id\": \"<user>\",\n  \"app_id\": \"<app-id>\",\n  \"application_name\": \"<name>\",\n  \"sso\": {\n    \"protocol\": \"oidc|saml|wsfed\",\n    \"flow\": \"authorization_code|pkce|n/a\",\n    \"proxy\": {\"use_app_proxy\": true|false, \"kcd\": true|false},\n    \"redirect_urls\": [\"...\"],\n    \"reply_urls\": [\"...\"],\n    \"logout_urls\": [\"...\"],\n    \"claims\": [\"email\",\"name\", \"...\"],\n    \"saml\": {\"metadata_url\": \"\", \"certificate\": \"\"}\n  },\n  \"contacts\": {\"custodian_name\": \"\", \"architect_name\": \"\"},\n  \"environment\": \"dev|test|prod\",\n  \"justification_text\": \"<why this pattern fits>\",\n  \"extras\": {}\n}\n\nAlso include **all raw Q&A** you collected as `answers: [{question_id, answer}]`.\n\n### Output style\n- Write concise, friendly messages.\n- After each question, wait for user reply.\n- Do not invent values.\n- If a tool call fails, try again or explain what you need.\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -192,
        0
      ],
      "id": "1bfbdfaa-eb98-4cc5-a6c7-42aa2701ce59",
      "name": "Entra Onboarding Agent"
    },
    {
      "parameters": {
        "toolDescription": "Fetches the official questionnaire JSON that drives the conversation.",
        "url": "https://raw.githubusercontent.com/GoyaAcademy/Entra-ID-Onboarding-Automation/main/questionnaires/questionnaire-sso-initiation-entra.json",
        "options": {
          "responseType": "json"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        96,
        -256
      ],
      "id": "dcddb1b5-9749-4bd9-b7c5-5f656781b487",
      "name": "Questionnaire JSON"
    },
    {
      "parameters": {
        "toolDescription": "Get current conversation state for a user/app via PostgREST",
        "url": "http://postgrest:3000/conversation_state",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "user_id",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('user_id', ``, 'string') }}"
            },
            {
              "name": "select",
              "value": "=*"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        96,
        -80
      ],
      "id": "e0f9e197-2a71-4852-a8fa-4de5781da18f",
      "name": "State: Get"
    },
    {
      "parameters": {
        "toolDescription": "Upsert an answer and update state via PostgREST RPC save_answer(user_id, app_id, question_id, answer)",
        "method": "POST",
        "url": "http://postgrest:3000/rpc/save_answer",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('json', `{}`, 'json') }}",
        "options": {
          "responseType": "json"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        96,
        96
      ],
      "id": "9f437d62-d2b1-475c-b9d2-3c85a3e185a2",
      "name": "State: Save"
    },
    {
      "parameters": {
        "toolDescription": "Finalize the onboarding by creating YAML and PR. POST JSON payload as per contract.",
        "method": "POST",
        "url": "http://n8n:5678/webhook/entra-onboard-finalize",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('json', `{}`, 'json') }}",
        "options": {
          "responseType": "json"
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        96,
        272
      ],
      "id": "5acb63fa-8232-4346-9093-204c706d25a5",
      "name": "Finalize Onboarding"
    }
  ],
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Entra Onboarding Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Model": {
      "ai_languageModel": [
        [
          {
            "node": "Entra Onboarding Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Memory": {
      "ai_memory": [
        [
          {
            "node": "Entra Onboarding Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Questionnaire JSON": {
      "ai_tool": [
        [
          {
            "node": "Entra Onboarding Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "State: Get": {
      "ai_tool": [
        [
          {
            "node": "Entra Onboarding Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "State: Save": {
      "ai_tool": [
        [
          {
            "node": "Entra Onboarding Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Finalize Onboarding": {
      "ai_tool": [
        [
          {
            "node": "Entra Onboarding Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1e8e5144-d59f-416d-af97-754bab5bc70b",
  "meta": {
    "templateId": "entra_onboarding_agent_chat"
  },
  "id": "20cd5c2d-a5bb-4a85-9a07-522ce6062ebb",
  "tags": []
}