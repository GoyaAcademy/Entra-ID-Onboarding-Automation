{
  "name": "entra_onboarding_agent_chat",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -672,
        -320
      ],
      "id": "30f35b58-c824-4056-8a5f-823f4ef87c4f",
      "name": "When chat message received",
      "webhookId": "1e8ffaf6-4809-4cf3-b5bf-c79edc5599e8"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -336,
        -48
      ],
      "id": "5e1f63f2-d90e-44c6-b523-6c6307f73f74",
      "name": "Model",
      "credentials": {
        "openAiApi": {
          "id": "p2L5UbDra453vx65",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.sessionId || $json.userId || $json.chatId || $json.$chatId || $json.$userId || $json.message?.chat?.id }}",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -224,
        112
      ],
      "id": "1b61912a-4368-49f0-a1c3-e6efd3ac4820",
      "name": "Memory"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "# Entra Onboarding Agent (SSO Pattern Selector)\n\nYou are an expert assistant who interviews application owners and selects the correct **Microsoft Entra ID** SSO pattern, then prepares an onboarding YAML and opens a GitHub PR.\n\n## Your tools\n- **Questionnaire JSON** — fetches the canonical question list.\n- **State: Get** — read conversation state for this user/app. **Call with** `{ args: { ... } }`.\n- **State: Save** — persist each answer and the computed recommendation. **Call with** `{ args: { ... } }`.\n- **Finalize Onboarding** — when you have everything, send a single JSON payload **wrapped** as `{ \"payload\": { ... } }` to create the YAML and GitHub PR. It returns the PR URL.\n\n## Mismatch handling & flexible input acceptance\n- For multiple‑choice, accept **numbers**, **letters**, or the **full label**. Map inputs to the canonical label and **echo what you understood**. If unambiguous, save directly; if ambiguous, **ask a brief confirmation**.\n- Accept common synonyms (e.g., “direct”, “portal”, “both”) and normalize before saving.\n\n## Required args for tool calls (LLM contract; node normalizes aliases)\n- **State: Get** → `{ \"args\": { \"user_id\": \"<string>\" } }` (aliases accepted: `userId`, `uid`, `user`).\n- **State: Save** → `{ \"args\": { \"user_id\": \"<string>\", \"app_id\": \"<string>\", \"question_id\": \"<string>\", \"answer\": <json> } }` (aliases accepted: `userId/appId/questionId`, `user/uid`, `qid`, `value/selection/choice/answerText`).\n- **Finalize Onboarding** → `{ \"payload\": <json> }` (strict; do not rename `payload`).\n\n## Non‑empty guardrails for saving\n- **Every** call to **State: Save** must include **non‑empty** `args.user_id` and `args.app_id`. If either is missing or empty, **do not** call the tool; instead:\n  1) Ask the user for the missing value **or**\n  2) Call **State: Get** with `{ args: { user_id } }` to rehydrate, then include the values and save.\n- If a save fails, inspect the error text. **Do not** say “technical issue”; instead, state the missing/invalid field and ask a short follow‑up, then retry with complete args.\n\n## Conversation protocol\n1. Capture **user_id**, **app_id**, and **application name** up front. Don’t call tools requiring `user_id` until it is known.\n2. Ask one focused question at a time and save each answer with **State: Save** (using `{ args: {...} }`).\n3. Use **Questionnaire JSON** to guide the flow; ask clarifiers if needed for pattern fit, and use the question **id** from the questionnaire for `question_id`.\n4. Periodically **State: Get** with `{ args: { user_id } }` to reload progress (idempotent).\n5. When ready, determine both the SSO initiation pattern and protocol from the collected answers. Write a concise justification (1–2 sentences) derived from those answers. Present your recommendation and ask the user to confirm Yes/No only — do not ask the user to provide a justification.\n6. When you decide the SSO initiation pattern, set sso.type exactly to \"sso-idp-initiated\" or \"sso-sp-initiated\". Do not invent other values. Do not write to pattern.type.\n\n## Final payload contract\nCall **Finalize Onboarding** with a body **wrapped** in `payload`:\n{\n  \"payload\": {\n    \"complete\": true,\n    \"user_id\": \"<user>\",\n    \"app_id\": \"<app-id>\",\n    \"application_name\": \"<name>\",\n    \"sso\": {\n      \"type\": \"sso-idp-initiated|sso-sp-initiated\",\n      \"protocol\": \"oidc|saml\",\n      \"flow\": \"authorization_code|pkce|n/a\",\n      \"proxy\": {\"use_app_proxy\": true|false, \"kcd\": true|false},\n      \"redirect_urls\": [\"...\"],\n      \"reply_urls\": [\"...\"],\n      \"logout_urls\": [\"...\"],\n      \"claims\": [\"email\",\"name\"],\n      \"saml\": {\"metadata_url\": \"\", \"certificate\": \"\"}\n    },\n    \"contacts\": {\"custodian_name\": \"\", \"architect_name\": \"\"},\n    \"environment\": \"dev|test|prod\",\n    \"justification_text\": \"<why this pattern fits>\",\n    \"extras\": {},\n    \"answers\": [{\"question_id\":\"claims\",\"answer\":[\"email\",\"name\"]}]\n  }\n}\n\nInclude **all raw Q&A** as `answers: [{question_id, answer}]`.\nPopulate justification_text yourself from the collected answers; never ask the user to author it.\n\n### Output style\n- Be concise and friendly.\n- After each question, wait for the user's reply.\n- Do not invent values.\n- If a tool call fails, adjust and retry or explain what you need."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -208,
        -320
      ],
      "id": "044960e8-ce6c-449e-a836-cd2d68970b1b",
      "name": "Entra Onboarding Agent"
    },
    {
      "parameters": {
        "toolDescription": "Fetches the official questionnaire JSON that drives the conversation.",
        "url": "https://raw.githubusercontent.com/GoyaAcademy/Entra-ID-Onboarding-Automation/main/questionnaires/questionnaire-sso-initiation-entra.json",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -96,
        -80
      ],
      "id": "5b8c9482-fea1-4a3a-85c2-2f051093a1ed",
      "name": "Questionnaire JSON"
    },
    {
      "parameters": {
        "toolDescription": "Get current conversation state for a user/app via PostgREST. Accepts { args: { user_id | userId | uid | user } } and normalizes to user_id.",
        "url": "http://postgrest:3000/conversation_state",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "user_id",
              "value": "={{ (() => { const i = $fromAI('args', {}, 'json') || {}; return i.user_id ?? i.userId ?? i.uid ?? i.user ?? ''; })() }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-User-Id",
              "value": "={{ (() => { const i = $fromAI('args', {}, 'json') || {}; return i.user_id ?? i.userId ?? i.uid ?? i.user ?? ''; })() }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        16,
        80
      ],
      "id": "7349665b-e0db-4552-9bb7-82e97f1b0183",
      "name": "State: Get"
    },
    {
      "parameters": {
        "toolDescription": "Upsert an answer and update state via PostgREST RPC save_answer(user_id, app_id, question_id, answer). Accepts { args: {...} } with flexible aliases.",
        "method": "POST",
        "url": "http://postgrest:3000/rpc/save_answer",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-User-Id",
              "value": "=={{ $json.args.user_id }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "params=single-object"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "user_id",
              "value": "=={{ $json.args.user_id }}"
            },
            {
              "name": "app_id",
              "value": "=={{ $json.args.app_id }}"
            },
            {
              "name": "question_id",
              "value": "=={{ $json.args.question_id }}"
            },
            {
              "name": "answer",
              "value": "=={{ $json.args.answer }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": "={{ true }}",
              "neverError": "={{ true }}",
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        352,
        32
      ],
      "id": "874fad96-adc1-4465-9b40-63091b06411b",
      "name": "State: Save"
    },
    {
      "parameters": {
        "toolDescription": "Finalize the onboarding by creating YAML and PR. POST JSON payload as per contract (body must be { payload: { ... } }).",
        "method": "POST",
        "url": "http://localhost:5678/webhook/entra-onboard-finalize",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { payload: $fromAI('payload', {}, 'json') } }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        768,
        -48
      ],
      "id": "5ff4271a-09c5-4b13-be4d-bb208e3fdbbb",
      "name": "Finalize Onboarding"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Entra Onboarding Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Model": {
      "ai_languageModel": [
        [
          {
            "node": "Entra Onboarding Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Memory": {
      "ai_memory": [
        [
          {
            "node": "Entra Onboarding Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Questionnaire JSON": {
      "ai_tool": [
        [
          {
            "node": "Entra Onboarding Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "State: Get": {
      "ai_tool": [
        [
          {
            "node": "Entra Onboarding Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "State: Save": {
      "ai_tool": [
        [
          {
            "node": "Entra Onboarding Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Finalize Onboarding": {
      "ai_tool": [
        [
          {
            "node": "Entra Onboarding Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fa4abcff-c7aa-4a91-981c-a09413ea6fc0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7355bc4812a42067f8cd9e945721e8ed4130208f7e0fc1ebb6c0b24ea47fde5b"
  },
  "id": "4IlTNRZQWcS8Srjw",
  "tags": []
}
